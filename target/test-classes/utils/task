// TAREFAS //
1. AgendamentoPage - Adicionar Confirmar, Cancelar e paciente chegou
2. INtegraçãoPage - Criar Cenário para testes

Ref.

package pages;

import org.junit.Assert;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import utils.Access;
import utils.Actions;
import utils.Log;

import java.time.Duration;
import java.util.List;

/**
 * Classe AgendamentoPage
 * Essa classe contém métodos para realizar interações com a página de agendamentos usando Selenium WebDriver.
 */
public class AgendamentoPage {
    private WebDriver driver;
    private Actions actions;

    /**
     * Construtor da classe AgendamentoPage.
     *
     * @param driver WebDriver utilizado para realizar as interações com a página.
     */
    public AgendamentoPage(WebDriver driver) {
        this.driver = driver;
        this.actions = new Actions(this.driver);
    }

    // MÉTODOS PRINCIPAIS

    /**
     * Método para acessar a página inicial (dashboard).
     */
    public void acessarInicio() {
        actions.clicarBotaoPegandoPeloId("ROLE_DASHBOARD");
        actions.esperar(2000); // Tempo de espera adicional para garantir carregamento da página.
    }

    /**
     * Método para abrir o modal de agendamento.
     *
     * @param css Seletor CSS para localizar o botão de abrir modal.
     */
    public void modalAgendamento(String css) {
        actions.clicarBotaoPegandoPeloCss(css);
        Log.registrar("Abrir modal de agendamento");
    }

    /**
     * Seleciona um procedimento pelo nome.
     *
     * @param nomeItem Nome do procedimento a ser selecionado.
     * @param xpathDrop XPath para abrir o dropdown.
     * @param xpathItem XPath dos itens no dropdown.
     */
    public void procedimento(String nomeItem, String xpathDrop, String xpathItem) {
        actions.clicarBotaoPegandoPeloXpath(xpathDrop);
        List<WebElement> items = driver.findElements(By.xpath(xpathItem));

        for (WebElement item : items) {
            if (item.getText().equalsIgnoreCase(nomeItem)) {
                item.click();
                Log.registrar("Procedimento '" + nomeItem + "' selecionado");
                break;
            }
        }
    }

    /**
     * Seleciona um profissional pelo nome.
     *
     * @param nomeProfissional Nome do profissional.
     * @param cssDrop Seletor CSS para abrir o dropdown.
     * @param cssItem Seletor CSS dos itens no dropdown.
     */
    public void profissional(String nomeProfissional, String cssDrop, String cssItem) {
        actions.clicarBotaoPegandoPeloCss(cssDrop);

        List<WebElement> profissionais = driver.findElements(By.cssSelector(cssItem));
        for (WebElement profissional : profissionais) {
            if (profissional.getText().equalsIgnoreCase(nomeProfissional)) {
                profissional.click();
                Log.registrar("Profissional '" + nomeProfissional + "' selecionado");
                break;
            }
        }
    }

    /**
     * Seleciona um compromisso pelo nome.
     *
     * @param nomeCompromisso Nome do compromisso.
     * @param cssDrop Seletor CSS para abrir o dropdown.
     * @param cssItem Seletor CSS dos itens no dropdown.
     */
    public void compromisso(String nomeCompromisso, String cssDrop, String cssItem) {
        actions.clicarBotaoPegandoPeloCss(cssDrop);

        List<WebElement> compromissos = driver.findElements(By.cssSelector(cssItem));
        for (WebElement compromisso : compromissos) {
            if (compromisso.getText().equalsIgnoreCase(nomeCompromisso)) {
                compromisso.click();
                Log.registrar("Compromisso '" + nomeCompromisso + "' selecionado");
                break;
            }
        }
    }

    /**
     * Pesquisa e seleciona um paciente pelo nome.
     *
     * @param nomePaciente Nome do paciente a ser pesquisado.
     */
    public void paciente(String nomePaciente) {
        try {
            actions.escreverPegandoPeloXpath("//input[@name='paciente']", nomePaciente);
            actions.esperar(1000);
            actions.clicarBotaoPegandoPeloXpath("//li[contains(.,'" + nomePaciente + "')]");
            Log.registrar("Paciente '" + nomePaciente + "' adicionado");
        } catch (NoSuchElementException e) {
            Log.registrar("Paciente '" + nomePaciente + "' não encontrado");
            throw e;
        }
    }

    /**
     * Adiciona a data de agendamento.
     *
     * @param data Data do agendamento no formato dd/MM/yyyy.
     * @param xpathData XPath do campo de data.
     */
    public void dataAgendamento(String data, String xpathData) {
        actions.escreverPegandoPeloXpath(xpathData, data);
        Log.registrar("Data de agendamento adicionada: " + data);
    }

    /**
     * Adiciona os horários de início e fim do agendamento.
     *
     * @param horaInicio Hora de início.
     * @param horaFim Hora de término.
     * @param elementoHoraInicio XPath do campo de hora de início.
     * @param elementoHoraFim XPath do campo de hora de término.
     */
    public void horaAgendamento(String horaInicio, String horaFim, String elementoHoraInicio, String elementoHoraFim) {
        actions.escreverPegandoPeloXpath(elementoHoraInicio, horaInicio);
        Log.registrar("Horário de início: " + horaInicio);
        actions.esperar(300);
        actions.escreverPegandoPeloXpath(elementoHoraFim, horaFim);
        Log.registrar("Horário de término: " + horaFim);
    }

    /**
     * Adiciona uma observação ao agendamento.
     *
     * @param horaObs Horário da observação.
     * @param data Data relacionada à observação.
     * @param xpath XPath do campo de observação.
     */
    public void observacao(String horaObs, String data, String xpath) {
        actions.escreverPegandoPeloXpath(xpath, "TESTE DE AGENDAMENTO " + data + " - " + horaObs);
        Log.registrar("Observação adicionada: TESTE DE AGENDAMENTO " + data + " - " + horaObs);
    }

    /**
     * Clica no botão para criar o agendamento, verificando se deve ser criação normal ou não.
     *
     * @param isCriacaoNormal Booleano que indica se é uma criação normal ou uma duplicada.
     * @param xpath XPath do botão de criação.
     */
    public void botaoCriarAgendamento(boolean isCriacaoNormal, String xpath) {
        try {
            actions.clicarBotaoPegandoPeloXpath(xpath);
            Log.registrar("Botão de criação de agendamento clicado");

            if (!isCriacaoNormal) {
                Assert.fail("O botão de criação foi clicado, mas não deveria permitir agendamento duplicado.");
                Log.registrar("Erro: tentativa de agendamento duplicado");
            }
        } catch (ElementClickInterceptedException e) {
            if (isCriacaoNormal) {
                Assert.fail("Falha ao clicar no botão de agendamento: o botão não está disponível. " + e.getMessage());
                Log.registrar("Erro ao clicar no botão: " + e.getMessage());
            } else {
                Assert.assertTrue("Agendamento duplicado detectado corretamente.", true);
                Log.registrar("Agendamento duplicado detectado corretamente");
            }
        }
    }

    /**
     * Método para validar a notificação de sucesso após criar um agendamento.
     */
    public void validarNotificacao() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement notificacao = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".p-toast-detail")));
            String textoNotificacao = notificacao.getText();
            Assert.assertEquals("Agendamento cadastrado com sucesso.", textoNotificacao);
            Log.registrar("Notificação exibida: " + textoNotificacao);
        } catch (NoSuchElementException e) {
            Log.registrar("Falha ao encontrar notificação: " + e.getMessage());
            Assert.fail("Notificação não encontrada: " + e.getMessage());
        }
    }

    // MÉTODOS ADICIONAIS (UTILIDADES)

    /**
     * Método para clicar em um botão pelo seu ID.
     *
     * @param id O ID do botão.
     */
    public void clicarBotaoPorId(String id) {
        try {
            WebElement botao = driver.findElement(By.id(id));
            botao.click();
            Log.registrar("Botão com ID '" + id + "' clicado");
        } catch (NoSuchElementException e) {
            Log.registrar("Botão com ID '" + id + "' não encontrado");
            throw e;
        }
    }

    /**
     * Método para aguardar por um elemento ser clicável antes de clicar.
     *
     * @param xpath XPath do elemento a ser clicado.
     */
    public void clicarQuandoEstiverClicavel(String xpath) {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        WebElement elemento = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(xpath)));
        elemento.click();
        Log.registrar("Elemento com XPath '" + xpath + "' clicado após estar clicável");
    }
}
